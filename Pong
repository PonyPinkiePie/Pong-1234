#include <stdio.h>

#define WIDTH 80
#define HEIGHT 25
#define PADDLE_SIZE 3
#define WINNING_SCORE 21

void clearScreen() { printf("\033[2J\033[H"); }

void drawTopBorder() {
  printf("┏");
  for (int x = 0; x < WIDTH; x++) {
    printf("━");
  }
  printf("┓\n");
}

void drawBottomBorder() {
  printf("┗");
  for (int x = 0; x < WIDTH; x++) {
    printf("━");
  }
  printf("┛\n");
}

void drawGameLine(int y, int paddle1_pos, int paddle2_pos, int ball_x,
                  int ball_y) {
  printf("┃");
  for (int x = 0; x < WIDTH; x++) {
    if (x == 0 && y >= paddle1_pos && y < paddle1_pos + PADDLE_SIZE) {
      printf("┃");
    } else if (x == WIDTH - 1 && y >= paddle2_pos &&
               y < paddle2_pos + PADDLE_SIZE) {
      printf("┃");
    } else if (x == ball_x && y == ball_y) {
      printf("⭕");
    } else {
      printf(" ");
    }
  }
  printf("┃\n");
}

void drawField(int paddle1_pos, int paddle2_pos, int ball_x, int ball_y,
               int score1, int score2) {
  clearScreen();
  drawTopBorder();

  for (int y = 0; y < HEIGHT; y++) {
    drawGameLine(y, paddle1_pos, paddle2_pos, ball_x, ball_y);
  }

  drawBottomBorder();
  printf("Игрок 1: %d | Игрок 2: %d\n", score1, score2);
}

int movePaddle(int paddle_pos, char command, int player) {
  int new_pos = paddle_pos;

  if (player == 1) {
    if ((command == 'a' || command == 'A') && new_pos > 0) {
      new_pos--;
    } else if ((command == 'z' || command == 'Z') &&
               new_pos < HEIGHT - PADDLE_SIZE) {
      new_pos++;
    }
  } else if (player == 2) {
    if ((command == 'k' || command == 'K') && new_pos > 0) {
      new_pos--;
    } else if ((command == 'm' || command == 'M') &&
               new_pos < HEIGHT - PADDLE_SIZE) {
      new_pos++;
    }
  }

  return new_pos;
}

char getValidInput() {
  char input = ' ';
  int valid = 0;

  while (!valid) {
    input = getchar();
    if (input == 'a' || input == 'A' || input == 'z' || input == 'Z' ||
        input == 'k' || input == 'K' || input == 'm' || input == 'M' ||
        input == ' ') {
      valid = 1;
    }

    while (getchar() != '\n') {
      // Clear input buffer
    }
  }

  return input;
}

void updateBallPosition(int *ball_x, int *ball_y, int ball_dx, int ball_dy) {
  *ball_x += ball_dx;
  *ball_y += ball_dy;
}

void checkWallCollision(int ball_y, int *ball_dy) {
  if (ball_y <= 0 || ball_y >= HEIGHT - 1) {
    *ball_dy = -(*ball_dy);
  }
}

void checkPaddleCollision(int ball_x, int ball_y, int *ball_dx, int paddle1_pos,
                          int paddle2_pos) {
  if (ball_x == 1 && ball_y >= paddle1_pos &&
      ball_y < paddle1_pos + PADDLE_SIZE) {
    *ball_dx = -(*ball_dx);
  } else if (ball_x == WIDTH - 2 && ball_y >= paddle2_pos &&
             ball_y < paddle2_pos + PADDLE_SIZE) {
    *ball_dx = -(*ball_dx);
  }
}

int checkGoal(int ball_x, int *score1, int *score2, int *ball_x_reset,
              int *ball_y_reset, int *ball_dx_reset, int *ball_dy_reset) {
  int goal_scored = 0;

  if (ball_x <= 0) {
    (*score2)++;
    *ball_x_reset = WIDTH / 2;
    *ball_y_reset = HEIGHT / 2;
    *ball_dx_reset = 1;
    *ball_dy_reset = 1;
    goal_scored = 1;
  } else if (ball_x >= WIDTH - 1) {
    (*score1)++;
    *ball_x_reset = WIDTH / 2;
    *ball_y_reset = HEIGHT / 2;
    *ball_dx_reset = -1;
    *ball_dy_reset = -1;
    goal_scored = 1;
  }

  return goal_scored;
}

void printWinner(int score1) {
  if (score1 >= WINNING_SCORE) {
    printf("Поздравляем, игрок 1 победил!\n");
  } else {
    printf("Поздравляем, игрок 2 победил!\n");
  }
}

int main() {
  int paddle1_pos = (HEIGHT - PADDLE_SIZE) / 2;
  int paddle2_pos = (HEIGHT - PADDLE_SIZE) / 2;
  int ball_x = WIDTH / 2;
  int ball_y = HEIGHT / 2;
  int ball_dx = 1;
  int ball_dy = 1;
  int score1 = 0;
  int score2 = 0;

  while (score1 < WINNING_SCORE && score2 < WINNING_SCORE) {
    drawField(paddle1_pos, paddle2_pos, ball_x, ball_y, score1, score2);
    char input = getValidInput();

    if (input != ' ') {
      paddle1_pos = movePaddle(paddle1_pos, input, 1);
      paddle2_pos = movePaddle(paddle2_pos, input, 2);
    }

    updateBallPosition(&ball_x, &ball_y, ball_dx, ball_dy);
    checkWallCollision(ball_y, &ball_dy);
    checkPaddleCollision(ball_x, ball_y, &ball_dx, paddle1_pos, paddle2_pos);

    int ball_x_reset, ball_y_reset, ball_dx_reset, ball_dy_reset;
    if (checkGoal(ball_x, &score1, &score2, &ball_x_reset, &ball_y_reset,
                  &ball_dx_reset, &ball_dy_reset)) {
      ball_x = ball_x_reset;
      ball_y = ball_y_reset;
      ball_dx = ball_dx_reset;
      ball_dy = ball_dy_reset;
    }
  }

  drawField(paddle1_pos, paddle2_pos, ball_x, ball_y, score1, score2);
  printWinner(score1);

  return 0;
}
